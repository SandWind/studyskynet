// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apps_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_apps_2eproto_metadata_getter(int index);
class App;
struct AppDefaultTypeInternal;
extern AppDefaultTypeInternal _App_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::App* Arena::CreateMaybeMessage<::App>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class App PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:App) */ {
 public:
  inline App() : App(nullptr) {}
  virtual ~App();
  explicit constexpr App(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  App(const App& from);
  App(App&& from) noexcept
    : App() {
    *this = ::std::move(from);
  }

  inline App& operator=(const App& from) {
    CopyFrom(from);
    return *this;
  }
  inline App& operator=(App&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const App& default_instance() {
    return *internal_default_instance();
  }
  static inline const App* internal_default_instance() {
    return reinterpret_cast<const App*>(
               &_App_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(App& a, App& b) {
    a.Swap(&b);
  }
  inline void Swap(App* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(App* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline App* New() const final {
    return CreateMaybeMessage<App>(nullptr);
  }

  App* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<App>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const App& from);
  void MergeFrom(const App& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(App* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "App";
  }
  protected:
  explicit App(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_apps_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSysdepFieldNumber = 2,
    kDescrFieldNumber = 4,
    kVersionFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string sysdep = 2;
  void clear_sysdep();
  const std::string& sysdep() const;
  void set_sysdep(const std::string& value);
  void set_sysdep(std::string&& value);
  void set_sysdep(const char* value);
  void set_sysdep(const char* value, size_t size);
  std::string* mutable_sysdep();
  std::string* release_sysdep();
  void set_allocated_sysdep(std::string* sysdep);
  private:
  const std::string& _internal_sysdep() const;
  void _internal_set_sysdep(const std::string& value);
  std::string* _internal_mutable_sysdep();
  public:

  // string descr = 4;
  void clear_descr();
  const std::string& descr() const;
  void set_descr(const std::string& value);
  void set_descr(std::string&& value);
  void set_descr(const char* value);
  void set_descr(const char* value, size_t size);
  std::string* mutable_descr();
  std::string* release_descr();
  void set_allocated_descr(std::string* descr);
  private:
  const std::string& _internal_descr() const;
  void _internal_set_descr(const std::string& value);
  std::string* _internal_mutable_descr();
  public:

  // int64 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:App)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sysdep_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descr_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// App

// string name = 1;
inline void App::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& App::name() const {
  // @@protoc_insertion_point(field_get:App.name)
  return _internal_name();
}
inline void App::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:App.name)
}
inline std::string* App::mutable_name() {
  // @@protoc_insertion_point(field_mutable:App.name)
  return _internal_mutable_name();
}
inline const std::string& App::_internal_name() const {
  return name_.Get();
}
inline void App::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void App::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:App.name)
}
inline void App::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:App.name)
}
inline void App::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:App.name)
}
inline std::string* App::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* App::release_name() {
  // @@protoc_insertion_point(field_release:App.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void App::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:App.name)
}

// string sysdep = 2;
inline void App::clear_sysdep() {
  sysdep_.ClearToEmpty();
}
inline const std::string& App::sysdep() const {
  // @@protoc_insertion_point(field_get:App.sysdep)
  return _internal_sysdep();
}
inline void App::set_sysdep(const std::string& value) {
  _internal_set_sysdep(value);
  // @@protoc_insertion_point(field_set:App.sysdep)
}
inline std::string* App::mutable_sysdep() {
  // @@protoc_insertion_point(field_mutable:App.sysdep)
  return _internal_mutable_sysdep();
}
inline const std::string& App::_internal_sysdep() const {
  return sysdep_.Get();
}
inline void App::_internal_set_sysdep(const std::string& value) {
  
  sysdep_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void App::set_sysdep(std::string&& value) {
  
  sysdep_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:App.sysdep)
}
inline void App::set_sysdep(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sysdep_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:App.sysdep)
}
inline void App::set_sysdep(const char* value,
    size_t size) {
  
  sysdep_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:App.sysdep)
}
inline std::string* App::_internal_mutable_sysdep() {
  
  return sysdep_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* App::release_sysdep() {
  // @@protoc_insertion_point(field_release:App.sysdep)
  return sysdep_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void App::set_allocated_sysdep(std::string* sysdep) {
  if (sysdep != nullptr) {
    
  } else {
    
  }
  sysdep_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sysdep,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:App.sysdep)
}

// int64 version = 3;
inline void App::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 App::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 App::version() const {
  // @@protoc_insertion_point(field_get:App.version)
  return _internal_version();
}
inline void App::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void App::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:App.version)
}

// string descr = 4;
inline void App::clear_descr() {
  descr_.ClearToEmpty();
}
inline const std::string& App::descr() const {
  // @@protoc_insertion_point(field_get:App.descr)
  return _internal_descr();
}
inline void App::set_descr(const std::string& value) {
  _internal_set_descr(value);
  // @@protoc_insertion_point(field_set:App.descr)
}
inline std::string* App::mutable_descr() {
  // @@protoc_insertion_point(field_mutable:App.descr)
  return _internal_mutable_descr();
}
inline const std::string& App::_internal_descr() const {
  return descr_.Get();
}
inline void App::_internal_set_descr(const std::string& value) {
  
  descr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void App::set_descr(std::string&& value) {
  
  descr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:App.descr)
}
inline void App::set_descr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:App.descr)
}
inline void App::set_descr(const char* value,
    size_t size) {
  
  descr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:App.descr)
}
inline std::string* App::_internal_mutable_descr() {
  
  return descr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* App::release_descr() {
  // @@protoc_insertion_point(field_release:App.descr)
  return descr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void App::set_allocated_descr(std::string* descr) {
  if (descr != nullptr) {
    
  } else {
    
  }
  descr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:App.descr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apps_2eproto
